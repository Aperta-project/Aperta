# Copyright (c) 2018 Public Library of Science

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# card.rnc: If this file is card.rnc: Do not forget to update card.rng if you
# change this file! This is not actually used by Aperta, but it is far easier to
# write than XML. .rnc is the RelaxNG compact schema format. We translate it
# into the xml format using a utility called `trang`. `trang `is a java utility
# from RelaxNG. if you're using apt you can install it via `sudo apt-get install
# trang`, otherwise clone the repo at https://github.com/relaxng/jing-trang and
# follow the instructions there. Run trang (or the trang.jar file)as follows to
# translate the compact rnc format to the rng that gets used in the XmlCardLoader
#
#   `trang -I rnc -O rng card.rnc card.rng`
#
# card.rng: Do not edit the card.rng file generated by trang; edit card.rnc instead.
#
# Please refer to http://books.xmlschemata.org/relaxng/page2.html  for a useful guide on working
# with RelaxNG schemas

file-type = xsd:string { pattern = "\.\w*" }

possible-value = element possible-value {
  attribute label { text },
  attribute value { text }
}

accepted-file-type = element possible-value {
  attribute label { text },
  attribute value { file-type }
}

allow-annotations      = attribute allow-annotations     { "true" | "false" }
required-field         = attribute required-field        { "true" | "false" }
default-answer-boolean = element default-answer-value  { "true" | "false" }
default-answer-text    = element default-answer-value  { text }

html = any-element* & text
any-attribute = attribute * { text }
any-element = element * { any-attribute*, html }

file-validation =
  element validation {
    attribute validation-type { "file-name" }
    & element error-message { text }
    & element validator { text }
  }

instructions-label-required-text =
  element instruction-text { html }?
  & element label { html }?
  & element text { html }

instructions-label-optional-text =
  element instruction-text { html }?
  & element label { html }?
  & element text { html }?


input-attributes =
  attribute ident { text }?
  & required-field?
  & allow-annotations?

string-validation =
  element validation {
    attribute validation-type { "string-match" | "string-length-minimum" | "string-length-maximum" }
    & element error-message { text }
    & element validator { text }
  }

text-input-attributes =
  input-attributes
  & default-answer-text?
  & instructions-label-optional-text
  & string-validation*


# Inputs
# Please keep these in alphabetical order.

check-box-input = element CheckBox {
  input-attributes
  & attribute value-type { "boolean" }
  & default-answer-boolean?
  & instructions-label-optional-text
  & content*
}

date-picker = element DatePicker {
  input-attributes
  & attribute value-type { "text" }
  & instructions-label-required-text
}

dropdown-input = element Dropdown {
  input-attributes
  & attribute value-type { "text" | "boolean" }
  & default-answer-text?
  & instructions-label-required-text
  & possible-value+
  & content*
}

email-editor = element EmailEditor {
  (input-attributes
  & attribute letter-template { text }?
  & attribute button-label { text }?
  & attribute value-type { "html" }),
  content*
}

file-uploader = element FileUploader {
  input-attributes
  & attribute value-type { "attachment" | "manuscript" | "sourcefile" }
  & attribute error-message { text }?
  & attribute allow-file-captions    { "true" | "false" }?
  & attribute allow-multiple-uploads { "true" | "false" }?
  & instructions-label-optional-text
  & file-validation*
  & accepted-file-type*
}

paragraph-input = element ParagraphInput {
  text-input-attributes
  & attribute value-type { "text" | "html" }
  & attribute editor-style { text }?
}

radio-input = element Radio {
  input-attributes
  & attribute value-type { "text" | "boolean" }
  & default-answer-text?
  & instructions-label-optional-text
  & possible-value*
  & content*
}

sendback-reason = element SendbackReason {
  input-attributes
  & attribute value-type { "boolean" }
  & instructions-label-optional-text
  & content*
}

short-input = element ShortInput {
  text-input-attributes
  & attribute value-type { "text" }
}

tech-check = element TechCheck {
  input-attributes
  & attribute value-type { "boolean" }
  & default-answer-boolean?
  & instructions-label-required-text
  & content*
}

tech-check-email = element TechCheckEmail {
  attribute ident { text }?,
  content*
}

email-template = element EmailTemplate {
  attribute letter-template { text }
}

# Contents
description = element Description {
  attribute ident { text }?
  & element text { html }
  & content*
}

display-children-content = element DisplayChildren {
  attribute ident { text }?
  & attribute child-tag { 'li' }?
  & attribute custom-class { text }?
  & attribute custom-child-class { text }?
  & attribute wrapper-tag { text }?
  & content*
}

display-with-value-content = element DisplayWithValue {
  attribute ident { text }?
  & attribute visible-with-parent-answer { text }
  & content*
  }

export-paper = element ExportPaper {
  attribute ident { text }?
  & instructions-label-optional-text
}

# IF requires comma, not interleave '&', to distinguish required THEN content from optional ELSE content.
if = element If {
  attribute condition { text },
  content,
  content?
}

error-message = element ErrorMessage {
  attribute key { text }
  & element text { text }?
}

repeat = element Repeat {
  attribute ident { text }?
  & attribute min { text }?
  & attribute max { text }?
  & attribute item-name { text }
  & content+
}

financial-disclosure-summary = element FinancialDisclosureSummary {
  attribute ident { text }?
}

content = (
 check-box-input
| date-picker
| description
| display-children-content
| display-with-value-content
| dropdown-input
| error-message
| export-paper
| file-uploader
| financial-disclosure-summary
| if
| paragraph-input
| radio-input
| repeat
| sendback-reason
| short-input
| tech-check
| email-editor
| tech-check-email
| email-template
)

start = element card {
  attribute required-for-submission { "true" | "false" }
  & attribute workflow-display-only { "true" | "false" }
  & content
}
