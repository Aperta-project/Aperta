--- pdf.orig.js	2016-07-20 16:12:49.867043350 +0200
+++ pdf.js	2016-07-21 00:20:32.536984707 +0200
@@ -826,7 +826,9 @@
   function getL10nData(key, args, fallback) {
     var data = gL10nData[key];
     if (!data) {
-      console.warn('#' + key + ' is undefined.');
+      if (Object.keys(gL10nData).length > 0) {
+        console.warn('#' + key + ' is undefined.');
+      }
       if (!fallback) {
         return null;
       }
@@ -3544,12 +3546,54 @@
     this.pagePromises = [];
     this.downloadInfoCapability = createPromiseCapability();
 
+    /**
+     * Needed because workers cannot load scripts outside of the current origin (as of firefox v45).
+     * This patch does require the worker script to be served with a (Access-Control-Allow-Origin: *) header
+     * @patch
+     */
+    var loadWorkerXHR = function(){
+      var url = PDFJS.workerSrc;
+      var jsdfd = PDFJS.createPromiseCapability();
+
+      if (url.match(/^blob:/) || typeof URL.createObjectURL === 'undefined') {
+        jsdfd.reject(); // Failed loading using blob
+      }
+
+      var xmlhttp;
+      xmlhttp = new XMLHttpRequest();
+
+      xmlhttp.onreadystatechange = function(){
+        if (xmlhttp.readyState != 4) return;
+
+        if (xmlhttp.status == 200) {
+          info('Loaded worker source through XHR.');
+          var workerJSBlob = new Blob([xmlhttp.responseText], { type: 'text/javascript' });
+          jsdfd.resolve(window.URL.createObjectURL(workerJSBlob));
+        } else {
+          jsdfd.reject();
+        }
+      };
+
+      xmlhttp.open('GET', url, true);
+      xmlhttp.send();
+      return jsdfd.promise;
+    }
+
+    var workerError = function() {
+      loadWorkerXHR().then(function(blob) {
+        PDFJS.workerSrc = blob;
+        loadWorker();
+      }, function() {
+        this.setupFakeWorker();
+      }.bind(this));
+    }.bind(this);
+
     // If worker support isn't disabled explicit and the browser has worker
     // support, create a new web worker and test if it/the browser fullfills
     // all requirements to run parts of pdf.js in a web worker.
     // Right now, the requirement is, that an Uint8Array is still an Uint8Array
     // as it arrives on the worker. Chrome added this with version 15.
-    if (!globalScope.PDFJS.disableWorker && typeof Worker !== 'undefined') {
+    var loadWorker = function() {
       var workerSrc = PDFJS.workerSrc;
       if (!workerSrc) {
         error('No PDFJS.workerSrc specified');
@@ -3559,6 +3603,8 @@
         // Some versions of FF can't create a worker on localhost, see:
         // https://bugzilla.mozilla.org/show_bug.cgi?id=683280
         var worker = new Worker(workerSrc);
+        worker.onerror = workerError;
+
         var messageHandler = new MessageHandler('main', worker);
         this.messageHandler = messageHandler;
 
@@ -3589,11 +3635,16 @@
         return;
       } catch (e) {
         info('The worker has been disabled.');
+        workerError();
       }
-    }
+    }.bind(this);
     // Either workers are disabled, not supported or have thrown an exception.
     // Thus, we fallback to a faked worker.
-    this.setupFakeWorker();
+    if (!globalScope.PDFJS.disableWorker && typeof Worker !== 'undefined') {
+      loadWorker();
+    } else {
+      this.setupFakeWorker();
+    }
   }
   WorkerTransport.prototype = {
     destroy: function WorkerTransport_destroy() {
@@ -10289,10 +10340,17 @@
 var PAGE_NUMBER_LOADING_INDICATOR = 'visiblePageIsLoading';
 var DISABLE_AUTO_FETCH_LOADING_BAR_TIMEOUT = 5000;
 
-PDFJS.imageResourcesPath = './images/';
-  PDFJS.workerSrc = '../build/pdf.worker.js';
-  PDFJS.cMapUrl = '../web/cmaps/';
-  PDFJS.cMapPacked = true;
+var scriptTagContainer = document.body ||
+                         document.getElementsByTagName('head')[0];
+var pdfjsSrc = scriptTagContainer.lastChild.src;
+
+if (pdfjsSrc) {
+  PDFJS.imageResourcesPath = pdfjsSrc.replace(/pdf\.js$/i, 'images/');
+  PDFJS.workerSrc = pdfjsSrc.replace(/pdf\.js$/i, 'pdf.worker.js');
+  PDFJS.cMapUrl = pdfjsSrc.replace(/pdf\.js$/i, 'cmaps/');
+}
+
+PDFJS.cMapPacked = true;
 
 var mozL10n = document.mozL10n || document.webL10n;
 
@@ -11740,7 +11798,7 @@
      * @returns {number}
      */
     get pagesCount() {
-      return this.pdfDocument.numPages;
+      return this.pdfDocument ? this.pdfDocument.numPages : 0;
     },
 
     /**
@@ -13192,7 +13250,11 @@
           !(container = element.parentNode)) {
         throw new Error('Not enough parameters.');
       } else if (this.overlays[name]) {
-        throw new Error('The overlay is already registered.');
+        if (this.active !== name) {
+          this.unregister(name);
+        } else {
+          throw new Error('The overlay is already registered and active.');
+        }
       }
       this.overlays[name] = { element: element,
                               container: container,
@@ -16485,7 +16547,7 @@
   },
 
   get pagesCount() {
-    return this.pdfDocument.numPages;
+    return this.pdfDocument ? this.pdfDocument.numPages : 0;
   },
 
   set page(val) {
@@ -17021,7 +17083,9 @@
   cleanup: function pdfViewCleanup() {
     this.pdfViewer.cleanup();
     this.pdfThumbnailViewer.cleanup();
-    this.pdfDocument.cleanup();
+    if (this.pdfDocument) {
+      this.pdfDocument.cleanup();
+    }
   },
 
   forceRendering: function pdfViewForceRendering() {
@@ -17462,7 +17526,12 @@
   }
 }
 
-document.addEventListener('DOMContentLoaded', webViewerLoad, true);
+// document.addEventListener('DOMContentLoaded', webViewerLoad, true);
+PDFJS.webViewerLoad = function (src) {
+  if (src) DEFAULT_URL = src;
+
+  webViewerLoad();
+};
 
 document.addEventListener('pagerendered', function (e) {
   var pageNumber = e.detail.pageNumber;
@@ -17585,7 +17654,7 @@
 });
 
 window.addEventListener('hashchange', function webViewerHashchange(evt) {
-  if (PDFViewerApplication.pdfHistory.isHashChangeUnlocked) {
+  if (PDFViewerApplication.pdfHistory && PDFViewerApplication.pdfHistory.isHashChangeUnlocked) {
     var hash = document.location.hash.substring(1);
     if (!hash) {
       return;
@@ -17598,7 +17667,7 @@
   }
 });
 
-window.addEventListener('change', function webViewerChange(evt) {
+/*window.addEventListener('change', function webViewerChange(evt) {
   var files = evt.target.files;
   if (!files || files.length === 0) {
     return;
@@ -17627,7 +17696,7 @@
     setAttribute('hidden', 'true');
   document.getElementById('download').setAttribute('hidden', 'true');
   document.getElementById('secondaryDownload').setAttribute('hidden', 'true');
-}, true);
+}, true);*/
 
 function selectScaleOption(value) {
   var options = document.getElementById('scaleSelect').options;
@@ -17738,6 +17807,9 @@
 }, true);
 
 function handleMouseWheel(evt) {
+  // Ignore mousewheel event if pdfViewer isn't loaded
+  if (!PDFViewerApplication.pdfViewer) return;
+  
   var MOUSE_WHEEL_DELTA_FACTOR = 40;
   var ticks = (evt.type === 'DOMMouseScroll') ? -evt.detail :
               evt.wheelDelta / MOUSE_WHEEL_DELTA_FACTOR;
