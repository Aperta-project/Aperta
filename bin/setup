#!/usr/bin/env ruby
require 'pathname'
require 'securerandom'

def cmd_available? cmd
  `which #{cmd}` != ''
end

$os = `uname`.chomp.downcase.intern
unless $os == :darwin || ($os == :linux && cmd_available?('apt-get'))
  raise 'This setup script is only designed for Mac OS or Debian/Ubuntu.'
end

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)

def run_pg(cmd)
  out = case $os
  when :darwin
    `#{cmd}`
  when :linux
    cmd = cmd.gsub("\"", "\\\"") # escape quotes
    `sudo su postgres -c "#{cmd}"`
  end

  if $?.to_i != 0
    "postgres command failed: #{out}"
    exit 1
  else
    out
  end
end

def header message
  full = "== #{message} =="
  puts
  puts "=" * full.length
  puts full
  puts "=" * full.length
  puts
end

def brew_install package, options=nil
  if system("brew ls #{package} &>/dev/null")
    puts "#{package} is already installed"
  else
    system "brew install #{package} #{options}"
  end
end

def npm_global_install package, options=nil
  if system("npm list -g #{package} &>/dev/null")
    puts "#{package} is already installed"
  else
    system "npm install -g #{package} #{options}"
  end
end

def copy_template source, dest
  if File.exist?(dest)
    puts "Not copying from #{source} (#{dest} already exists)."
  else
    puts "Copying #{source} to #{dest}."
    system "cp #{source} #{dest}"
  end
end


def create_config_file(path)
  return if File.exists?(path)

  header "Generating default #{path}"
  File.open(path, 'w+') do |f|
    yield f
  end
  puts "Wrote to #{path}"
end


Dir.chdir APP_ROOT do
  system "rm -f setup.log"

  header 'Installing packages'
  case $os
  when :darwin
    brew_install 'imagemagick', '--with-libtiff'
    %w(node@6 redis wget postgresql qpdf).each do |package|
      brew_install package
    end
  when :linux
    # Install node v 6.11.1
    system "curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -"
    system "sudo apt-get install -y imagemagick nodejs wget redis-server postgresql qpdf"
  end
  npm_global_install 'yarn'
  header 'Installing gems'
  system 'gem install bundler --conservative'
  system 'bundle install'

  # Adding slanger to the Gemfile is not recommended: https://github.com/stevegraham/slanger#slanger
  header 'Installing Slanger gem'
  system 'gem install slanger'

  create_config_file('.env.development') do |f|
    f.puts "RAILS_SECRET_TOKEN=#{SecureRandom.hex(64)}"
  end

  header 'Installing mailcatcher'
  system 'gem install mailcatcher'
  puts 'Run in the console `mailcatcher` to start the daemon. For more information check http://mailcatcher.me/'

  header 'Ensuring PostgreSQL tahi role exists'
  # NOTE rolname is not a typo
  # http://stackoverflow.com/questions/8546759/how-to-check-if-a-postgres-user-exists
  roles = run_pg %q[psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='tahi'"]
  if !roles.empty?
    puts 'PostgreSQL user already exists'
  else
    puts 'Creating the tahi PostgreSQL user'
    run_pg('createuser -s -r tahi')
    if $os == :linux
      # peer auth does not work on linux
      cmd = "ALTER USER \"tahi\" with password 'tahi';"
      run_pg("psql -c \"#{cmd}\"")
    end
  end

  header 'Copying sample files'
  copy_template 'config/database.yml.sample', 'config/database.yml'
  if $os == :linux
    # peer auth does not work on linux, so set the password
    system "sed -i 's/password:$/password: tahi/' config/database.yml"
  end
  copy_template 'Procfile.template', 'Procfile.local'

  create_config_file('.foreman') do |f|
    f.puts "port: 5000"
    f.puts "procfile: Procfile.local"
    f.puts "env: ''"
  end

  header 'Preparing development database (output logged to setup.log)'
  system 'bin/rake db:setup >> setup.log'

  header 'Preparing testing database (output logged to setup.log)'
  system 'bin/rake db:setup RAILS_ENV=test >> setup.log'

  header 'Installing javascript dependencies'
  system 'bundle exec rake ember:install'

  header 'Removing old logs and tempfiles'
  system 'rm -f log/**/*'
  system 'rm -rf tmp/cache'

  header 'Preparing tmp/pids'
  system 'mkdir -p tmp/pids'

  header 'setting up overcommit'
  system 'bundle exec overcommit --install'

  header 'downloading ember inspector'
  system 'cd tmp && rm -f addon-470970-latest.xpi && wget https://addons.mozilla.org/firefox/downloads/latest/ember-inspector/addon-470970-latest.xpi'

  puts
  puts 'Success!'
end
