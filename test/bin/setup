#! /usr/bin/env bash

set -e

command_exists () {
  command -v $1 &> /dev/null;
}

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

USAGE="usage: bin/setup [-v]"
DESC="Prepare application state for our python tests. Default sets up a local dev env. -v sets up a local vagrant env"

while getopts ":vh" opt; do
  case $opt in
    v)
      VAGRANT=true
      ;;
    h)
      echo $USAGE
      echo $DESC
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo $USAGE
      exit 1
      ;;
  esac
done

# ensure virtualenv is installed
if ! command_exists virtualenv; then
  if ! command_exists pip; then
    echo "Whoops, you need to install either pip or virtualenv"
    echo "Check here for more info: https://pip.readthedocs.io/en/stable/installing/#install-pip"
    exit 1
  fi
  pip install virtualenv
fi

# install python requirements into a virtual environment
VENV_DIR="venv"
VENV_ACTIVATE="$VENV_DIR/bin/activate"
if [ ! -e $VENV_ACTIVATE ]; then
  virtualenv $VENV_DIR
fi
source $VENV_ACTIVATE
pip install -r requirements.txt

# get secrets

if [ $VAGRANT ]; then
  echo "Configuring vagrant environment ..."
  scp aperta@aperta-frontend-201.soma.plos.org:secrets/env.tahi-integration config/env.vagrant
  source config/env.vagrant
else
  echo "Configuring development environment ..."
  source config/env.dev
fi

# setup testing assets
$BIN_DIR/download_and_extract_assets

# setup data on host
python -m frontend.test_a_1_add_superadmin
python -m frontend.test_a_2_add_stock_mmt
python -m frontend.test_a_3_add_stock_users_assignments
