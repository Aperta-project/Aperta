#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This test case validates style and function of Similarity Check Card, card settings page;
Checks manual generation of Similarity Check and checks results on iThenticate site with
automation off.
Checks triggering Report generetion with different card setting options.
Tests require 5 manuscript templates generated by test_a_2_add_stock_mmt.py with different
automation settings:
- An MMT named "Similarity Check test", automation: off, which is default
- An MMT named "Similarity Check test on full submission", automation: on, at first full submission
- An MMT named "Similarity Check test on major revision", automation: on, after first major revise
decision
- An MMT named "Similarity Check test on minor revision", automation: on, after first minor revise
decision
- An MMT named "Similarity Check test on first revision", automation: on, after any first revise
decision
"""

import logging
import random

from Base.Decorators import MultiBrowserFixture
from Base.Resources import users, editorial_users, super_admin_login, handling_editor_login, \
    cover_editor_login, sim_check_full_submission_mmt, sim_check_major_revision_mmt, \
    sim_check_minor_revision_mmt, sim_check_first_revision_mmt, sim_check_off_mmt
from frontend.common_test import CommonTest
from frontend.Cards.assign_team_card import AssignTeamCard
from frontend.Cards.register_decision_card import RegisterDecisionCard
from frontend.Cards.similarity_check_card import SimilarityCheckCard
from frontend.Pages.manuscript_viewer import ManuscriptViewerPage
from frontend.Pages.workflow_page import WorkflowPage
from .Pages.admin_workflows import AdminWorkflowsPage
from .Pages.sim_check_settings import SimCheckSettings
from .Tasks.upload_manuscript_task import UploadManuscriptTask

__author__ = 'gtimonina@plos.org'

auto_options = (('at_first_full_submission', sim_check_full_submission_mmt['name']),
                ('after_major_revise_decision', sim_check_major_revision_mmt['name']),
                ('after_minor_revise_decision', sim_check_minor_revision_mmt['name']),
                ('after_any_first_revise_decision', sim_check_first_revision_mmt['name']),
                ('off', sim_check_off_mmt['name']))
doc_choice = \
    ['frontend/assets/docs/HomeRun_Vector_Assembly_System_A_Flexible_and_Standardized_Cloning_'
     'System_for_.docx',
     'frontend/assets/docs/Cytoplasmic_Viruses_Rage_Against_the_Cellular_RNA_Decay_Machine.docx',
     'frontend/assets/docs/Abby_normal_Contextual_Modulation.docx',
     'frontend/assets/docs/DNA_Fragments_Assembly_Based_on_Nicking_Enzyme_System.docx',
     'frontend/assets/docs/The_eyes_dont_have_it_Lie_detection_and_Neuro-Linguistic_Programming'
     '.doc',
     'frontend/assets/pdfs/Promoter_sequence_determines_the_relationship_between_expression_level'
     '_and_noise.pdf',
     'frontend/assets/pdfs/Word_Document_with_Inserted_Text_Box.pdf',
     'frontend/assets/pdfs/Genome-wide_diversity_in_the_Levant_reveals_recent_structuring_by_'
     'culture.pdf',
     'frontend/assets/pdfs/The_Impact_of_Psychological_Stress_on_Mens_Judgements_of_'
     'Female_Body_Size.pdf',
     'frontend/assets/pdfs/Chemical_Synthesis_of_Bacteriophage_G4.pdf',
     'frontend/assets/pdfs/Mentalizing_Deficits_Constrain_Belief_in_a_Personal_God.pdf']


@MultiBrowserFixture
class SimilarityCheckTest(CommonTest):
    """
    Validate the elements, styles, functions of the Similarity Check card
    """

    def test_core_settings_validate_components_styles(self):
        """
        Validates elements and styles for the Similarity Check Settings page
        :return: void function
        """
        logging.info('Validating Similarity Check Settings: page components and styles')
        user_type = super_admin_login
        logging.info('Logging in as user: {0}'.format(user_type))
        dashboard_page = self.cas_login(email=user_type['email'])
        dashboard_page.page_ready()
        dashboard_page.click_admin_link()
        adm_wf_page = AdminWorkflowsPage(self.getDriver())
        adm_wf_page.page_ready()
        adm_wf_page.open_mmt('Similarity Check test')
        adm_wf_page.click_on_card_settings(adm_wf_page._similarity_check_card)

        card_settings = SimCheckSettings(self.getDriver())
        card_settings.overlay_ready()
        card_settings.validate_card_setting_style('Similarity Check: Settings')
        card_settings.validate_setting_style_and_components()

        card_settings.click_cancel()

    def test_smoke_validate_styles_components_generate_manually(self):
        """
        test_smoke_validate_styles_components_generate_manually:
        Validates the similarity check card presence in a workflow view, generating report manually.
        Validates form elements and styles.
        Testing default settings, automation is Off.
        Steps:
        1. Create new submission using workflow with auto option off, which is default
        2. As an editorial user, open the manuscript and check that the card appears only in
           workflow view, not in manuscript view
        3. Open Similarity Check card in workflow view, check components and style
        4. Generate report manually
        5. After the report is generated, check Report result, the link to api.ithenticate.com,
           navigate to result page and validate
        6. Register Minor or Major decision
        7. As an author, submit new version
        8. As an editorial user, open Similarity Check Card to check that the card is marked as
           completed for new revision
        :return: void function
        """

        logging.info('Test Similarity Check with Automation Off:: validate styles and components, '
                     'generate report manually')

        # log as an author and create new submission
        creator_user = random.choice(users)
        doc_to_use = random.choice(doc_choice)
        logging.info('Chosen file to upload: {0}'.format(doc_to_use))

        title = 'Similarity Check test - manually generated report'
        short_doi, paper_url = self.create_new_submission_complete_tasks_and_submit(
                creator_user, title, doc_to_use, mmt_name='Similarity Check test')

        # log as editorial user
        staff_user = random.choice(editorial_users)
        logging.info('Logging in as user: {0}'.format(staff_user['name']))
        dashboard_page = self.cas_login(email=staff_user['email'])
        dashboard_page.go_to_manuscript(short_doi)
        self._driver.navigated = True

        paper_viewer = ManuscriptViewerPage(self.getDriver())
        paper_viewer.page_ready()
        # AC#2 - check the card appears only in workflow view, not in manuscript view
        assert not paper_viewer.is_task_present("Similarity Check"), \
            "Similarity Check card should not be available in Manuscript view"
        # go to Workflow view
        paper_viewer._wait_for_element(paper_viewer._get(paper_viewer._tb_workflow_link))
        paper_viewer.click_workflow_link()
        workflow_page = WorkflowPage(self.getDriver())
        workflow_page.page_ready()

        workflow_page.click_card('similarity_check')
        sim_check = SimilarityCheckCard(self.getDriver())
        sim_check.card_ready()

        auto_setting_default = 'off'
        # get auto settings from db, it is expected to be off by default
        auto_settings_db = sim_check.get_sim_check_auto_settings(short_doi=short_doi)
        assert auto_settings_db == 'off', 'Automation setting in db: \'{0}\' is not ' \
                                          'the expected: \'{1}\''.format(auto_settings_db,
                                                                         auto_setting_default)

        sim_check.validate_card_header(short_doi)
        sim_check.validate_styles_and_components(auto_setting_default)

        # generate report
        start_time, pending_message, report_title = sim_check.generate_manual_report()
        assert "Pending" in pending_message, '\'Pending\' is expected in the message: {0}'\
            .format(pending_message)
        assert 'Similarity Check Report' in report_title, '\'Similarity Check Report\' is ' \
                                                          'expected in: '.format(report_title)
        self.validate_report_history(sim_check, version='0.0')

        report_validation_result, validation_seconds, paper_data, report_data = \
            sim_check.get_report_result(start_time)

        logging.info('Elapsed time for validation in seconds: '
                     '{0}'.format(str(validation_seconds)))

        # analyze the result
        if report_validation_result:
            # 10 min time out exception - error message is expected to be displayed
            assert 'Report not available:' in report_validation_result, report_validation_result
        else:
            # results assertion
            assert paper_data['title'] == report_data['title'], \
                'The title {0} is expected.'.format(paper_data['title'])
            assert paper_data['value'] in report_data['value'], 'Score {0} is expected in {1}' \
                .format(paper_data['value'], report_data['value'])
            assert paper_data['author'] in report_data['author'], \
                'Paper author {0} is expected in {1}'.format(paper_data['author'],
                                                             report_data['author'])

        sim_check.logout()

        # check that the Report generation is not triggered for the next revision:
        # log as editorial user
        staff_user = random.choice(editorial_users)
        logging.info('Logging in as editorial user: {0}'.format(staff_user['name']))
        workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)

        decision = random.choice(['Major Revision', 'Minor Revision'])
        # register decision
        self.make_register_decision(workflow_page, decision)
        workflow_page.logout()

        # Login as user and complete Revise Manuscript (Response to Reviewers)
        self.submit_new_version(short_doi, creator_user)

        # log as editorial user and open the manuscript in workflow view
        workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
        workflow_page.click_card('similarity_check')
        # check AC#6: If the card is marked complete, it is not marked as incomplete
        # when a new version is submitted
        assert sim_check.completed_state(), 'The card is expected to be completed'
        sim_check.validate_styles_and_components('off')
        # check Report History
        self.validate_report_history(sim_check, version='0.0')

    def test_smoke_validate_access_and_recent_activity(self):
        """
        Validates access of internal and external editorial users to the Similarity Check card.
        Validates Recent Activity feed item after Marking the card Complete/Incomplete.
        Scenario for access validation:
        1. Create new submission using workflow with auto option off, which is default
        2. As an internal editorial user, navigate to the Similarity Check card, check the card
           title and buttons, check that the card is editable
        3. Open 'Assign Team' card and assign cover and handling editors
        4. Mark task as complete and check recent activity
        5. Mark task as incomplete and check recent activity
        6. Log in as cover and handling editors, navigate to the Similarity Check Card and
           check that the card is accessible, but not editable
        Notes: Step 2 repeats for all internal editorial users (excluding  cover and handling
          editors)
          Steps 3-5: only one time, with the first staff user
          Step 6: for both, cover and handling editors.
        :return: void function
        """
        # excluding 'after full submission' option
        auto_setting = random.choice(auto_options[1:])
        auto_option = auto_setting[0]
        mmt_name = auto_setting[1]
        logging.info('Test Similarity Check::validate_access, auto option: '
                     '{0}'.format(str(auto_setting)))

        # log as author and create new submission using 'Similarity Check test' mmt
        creator_user = random.choice(users)
        title = 'Similarity Check test with default settings - validate access, ' \
                '{0}'.format(auto_option)
        short_doi, paper_url = self.create_new_submission_complete_tasks_and_submit(
                creator_user, title, '', mmt_name)

        # set handler_and_cover_assigned to false to make sure handling and cover editors
        # assigned only once
        handler_and_cover_assigned = False
        for staff_user in editorial_users:
            logging.info('Logging in as user: {0}'.format(staff_user['name']))
            dashboard_page = self.cas_login(email=staff_user['email'])
            dashboard_page.page_ready()
            dashboard_page.go_to_manuscript(short_doi)
            self._driver.navigated = True
            paper_viewer = ManuscriptViewerPage(self.getDriver())
            # go to Workflow view
            paper_viewer._wait_for_element(paper_viewer._get(paper_viewer._tb_workflow_link))
            paper_viewer.click_workflow_link()
            workflow_page = WorkflowPage(self.getDriver())
            workflow_page.page_ready()

            workflow_page.click_card('similarity_check')
            sim_check = SimilarityCheckCard(self.getDriver())
            sim_check.card_ready()
            card_title = sim_check._get(sim_check._card_heading)
            assert card_title.text == 'Similarity Check'
            sim_check.validate_generate_report_button()

            # check the card is editable
            completed_section_button = sim_check._get(sim_check._btn_done)
            assert completed_section_button.text in ["MAKE CHANGES TO THIS TASK",
                                                     "I AM DONE WITH THIS TASK"], \
                completed_section_button.text

            # assign cover editor and handling editor to test their access to the card
            # and testing Complete/Incomplete marking in task recent activity
            if not handler_and_cover_assigned:  # just to be sure we do it once
                sim_check.click_close_button()
                self.wait_for_card_to_be_closed(workflow_page)
                workflow_page.click_card('assign_team')
                assign_team = AssignTeamCard(self.getDriver())
                assign_team.card_ready()
                assign_team.assign_role(cover_editor_login, 'Cover Editor')
                assign_team.assign_role(handling_editor_login, 'Handling Editor')
                handler_and_cover_assigned = True

                assign_team.click_close_button()
                self.wait_for_card_to_be_closed(workflow_page)

                # Validate marking Complete/Incomplete in task recent activity
                workflow_page.click_card('similarity_check')
                sim_check = SimilarityCheckCard(self.getDriver())
                sim_check.card_ready()
                sim_check.click_completion_button()  # mark task as complete

                sim_check.click_close_button()
                self.wait_for_card_to_be_closed(workflow_page)

                # Test for task completion in the activity feed
                workflow_page.open_recent_activity()
                workflow_page.validate_recent_activity_entry(
                        'Similarity Check card was marked as complete')
                workflow_page.close_overlay()

                workflow_page.click_card('similarity_check')
                sim_check = SimilarityCheckCard(self.getDriver())
                sim_check.card_ready()
                sim_check.click_completion_button()  # mark task as incomplete

                sim_check.click_close_button()
                self.wait_for_card_to_be_closed(workflow_page)

                # Test for task incompletion in the activity feed
                workflow_page.open_recent_activity()
                workflow_page.validate_recent_activity_entry(
                        'Similarity Check card was marked as incomplete')
                workflow_page.close_overlay()

            # logout
            sim_check.logout()

        # log as cover/handling editor
        # if manuscript is submitted, the card is read-only
        # so it should not be editable (confirmed by Shane)
        helping_editors = [cover_editor_login, handling_editor_login]
        for staff_user in helping_editors:
            logging.info('Logging in as user: {0}'.format(staff_user['name']))
            dashboard_page = self.cas_login(email=staff_user['email'])
            dashboard_page.page_ready()
            dashboard_page.go_to_manuscript(short_doi)
            self._driver.navigated = True
            paper_viewer = ManuscriptViewerPage(self.getDriver())
            # go to Workflow view
            paper_viewer._wait_for_element(paper_viewer._get(paper_viewer._tb_workflow_link))
            paper_viewer.click_workflow_link()
            workflow_page = WorkflowPage(self.getDriver())
            workflow_page.page_ready()
            workflow_page.click_card('similarity_check')
            sim_check = SimilarityCheckCard(self.getDriver())
            sim_check._wait_for_element(sim_check._get(sim_check._card_heading))
            card_title = sim_check._get(sim_check._card_heading)
            assert card_title.text == 'Similarity Check'
            assert sim_check._check_for_absence_of_element(sim_check._btn_done)

            # logout
            sim_check.logout()

    def test_core_trigger_automated_report(self):
        """
        test_core_trigger_automated_report:
        Validates triggering the Report generation depending on card automation settings.
        Steps:
        1. Create new submission with auto option on (randomly chosen option)
        2. As an editorial user, navigate to the Similarity Check card, validate components and
             style, and the card state
        Next steps depend on automation option:
        3.1 'at_first_full_submission':
          1. As an editorial user, open Similarity Check Card to check the Report is triggered
          (pending)
          2. Register Minor or Major decision (random choice)
          3. As an author, submit new version
          4. As an editorial user, open Similarity Check Card to check the Report is not triggered
        3.2 'after_any_first_revise_decision':
          1. As an editorial user, open Similarity Check Card to check the Report is not triggered
             after first submission
          2. Register Minor or Major decision (random choice)
          3. As an author, submit new version
          4. As an editorial user, open Similarity Check Card to check the Report is triggered
          5. Register Minor or Major decision (random choice)
          6. As an author, submit new version
          7. As an editorial user, open Similarity Check Card to check the Report is not triggered
        3.3 'after_major_revise_decision':
          1. As an editorial user, open Similarity Check Card to check the Report is not triggered
          2. Register Major decision
          3. As an author, submit new version
          4. As an editorial user, open Similarity Check Card to check the Report is triggered
          5. Register Minor decision
          6. As an author, submit new version
          7. As an editorial user, open Similarity Check Card to check the Report is not triggered
          8. Register Major decision
          9. As an author, submit new version
         10. As an editorial user, open Similarity Check Card to check the Report is not triggered
        3.4 'after_minor_revise_decision' - same steps as in 3.3, but checking sequence
             Minor->Major->Minor decisions instead of Major->Minor->Major
        :return: void function
        """
        logging.info('Test Similarity Check with Automation ON:: generate report '
                     'manually and validate access')

        # excluding 'off' option
        auto_setting = random.choice(auto_options[:4])
        logging.info('Testing with auto option, mmt name: {0}'.format(str(auto_setting)))

        auto_option = auto_setting[0]
        mmt_name = auto_setting[1]

        # log as an author and create new submission
        creator_user = random.choice(users)
        logging.info('Logging in as editorial user: {0}'.format(creator_user['name']))

        doc_to_use = random.choice(doc_choice)
        logging.info('Chosen file to upload: {0}'.format(doc_to_use))
        title = 'Similarity Check test with auto trigger: {0}'.format(auto_option)
        short_doi, paper_url = self.create_new_submission_complete_tasks_and_submit(
                creator_user, title, doc_to_use, mmt_name)

        # log as editorial user
        staff_user = random.choice(editorial_users)
        logging.info('Logging in as editorial user: {0}'.format(staff_user['name']))
        workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)

        workflow_page.click_card('similarity_check')
        sim_check = SimilarityCheckCard(self.getDriver())
        sim_check.card_ready()
        sim_check.validate_card_header(short_doi)
        if auto_option == 'at_first_full_submission':
            sim_check.validate_styles_and_components(auto_option, triggered=True)
            # check Report History
            self.validate_report_history(sim_check, version='0.0')

            sim_check.click_close_button()
            self.wait_for_card_to_be_closed(workflow_page)

            decision = random.choice(['Major Revision', 'Minor Revision'])
            logging.info('Chosen Decision to register: {0}'.format(decision))
            # register decision
            self.make_register_decision(workflow_page, decision)
            workflow_page.logout()

            # Login as user and complete Revise Manuscript (Response to Reviewers)
            self.submit_new_version(short_doi, creator_user)

            # log as editorial user and open the manuscript in workflow view
            workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            workflow_page.click_card('similarity_check')
            sim_check.validate_styles_and_components(auto_option, triggered=False,
                                                     auto_report_done=True)
            # check Report History
            self.validate_report_history(sim_check, version='0.0')

        elif auto_option == 'after_any_first_revise_decision':
            sim_check.validate_styles_and_components(auto_option, triggered=False)

            sim_check.click_close_button()
            self.wait_for_card_to_be_closed(workflow_page)

            decision = random.choice(['Major Revision', 'Minor Revision'])
            logging.info('First chosen Decision to register: {0}'.format(decision))
            # register decision
            self.make_register_decision(workflow_page, decision)
            workflow_page.logout()

            # Login as user and complete Revise Manuscript (Response to Reviewers)
            self.submit_new_version(short_doi, creator_user)
            # log as editorial user and open the manuscript in workflow view
            workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            workflow_page.click_card('similarity_check')
            sim_check.validate_styles_and_components(auto_option, triggered=True)
            self.validate_report_history(sim_check, version='1.0')

            # Last step is disabled due to APERTA-12328
            # TODO: remove comments once APERTA-12328 gets resolved
            # sim_check.click_close_button()
            # self.wait_for_card_to_be_closed(workflow_page)
            # decision = random.choice(['Major Revision', 'Minor Revision'])
            # logging.info('Second chosen Decision to register: {0}'.format(decision))
            # # register decision
            # self.make_register_decision(workflow_page, decision)
            # workflow_page.logout()
            #
            # # Login as user and complete Revise Manuscript (Response to Reviewers)
            # self.submit_new_version(short_doi, creator_user)
            # # log as editorial user and open the manuscript in workflow view
            # workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            # workflow_page.click_card('similarity_check')
            # sim_check.validate_styles_and_components(auto_option, triggered=False,
            #                                          auto_report_done=True)
            # # check Report History
            # self.validate_report_history(sim_check, version='1.0')

        else:
            if auto_option == 'after_major_revise_decision':
                decision_steps = ['Major Revision', 'Minor Revision', 'Major Revision']
            else:
                decision_steps = ['Minor Revision', 'Major Revision', 'Minor Revision']
            sim_check.validate_styles_and_components(auto_option, triggered=False)

            sim_check.click_close_button()
            self.wait_for_card_to_be_closed(workflow_page)

            # register decision that should trigger automated report
            self.make_register_decision(workflow_page, decision=decision_steps[0])
            workflow_page.logout()

            # Login as user and complete Revise Manuscript (Response to Reviewers)
            self.submit_new_version(short_doi, creator_user)
            # log as editorial user and open the manuscript in workflow view
            workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            workflow_page.click_card('similarity_check')
            sim_check.validate_styles_and_components(auto_option, triggered=True)

            sim_check.click_close_button()
            self.wait_for_card_to_be_closed(workflow_page)
            # another register decision that should not trigger automated report
            self.make_register_decision(workflow_page, decision=decision_steps[1])
            workflow_page.logout()

            # Login as user and complete Revise Manuscript (Response to Reviewers)
            self.submit_new_version(short_doi, creator_user)
            # log as editorial user and open the manuscript in workflow view
            workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            workflow_page.click_card('similarity_check')
            sim_check.validate_styles_and_components(auto_option, triggered=False,
                                                     auto_report_done=True)
            self.validate_report_history(sim_check, version='1.0')

            # Last step is disabled due to APERTA-12328
            # TODO: remove comments once APERTA-12328 gets resolved
            # sim_check.click_close_button()
            # self.wait_for_card_to_be_closed(workflow_page)
            # # same register decision as in step 1, should not trigger automated report
            # # as only the first one must be a trigger
            # self.make_register_decision(workflow_page, decision=decision_steps[2])
            # workflow_page.logout()
            #
            # # Login as user and complete Revise Manuscript (Response to Reviewers)
            # self.submit_new_version(short_doi, creator_user)
            # # log as editorial user and open the manuscript in workflow view
            # workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
            # workflow_page.click_card('similarity_check')
            # sim_check.validate_styles_and_components(auto_option, triggered=False,
            #                                          auto_report_done=True)
            # # check Report History
            # self.validate_report_history(sim_check, version='1.0')

    @staticmethod
    def wait_for_card_to_be_closed(workflow_page):
        """
        The method to wait for task to be closed in the workflow view
        :param workflow_page: the instance of workflow page
        :return: void function
        """
        workflow_page._wait_on_lambda(lambda: workflow_page.get_current_url()
                                      .split('/')[-1] == 'workflow')

    def test_core_disable_automation_by_manual_generation(self):
        """
        test_core_disable_automation_by_manual_generation:
        Validates APERTA-9958: Disable similarity check automation on manual report
        AC 1: User can disable report automation for an individual manuscript by running it manually
        AC 2: Once automation is disabled, it stays disabled for that manuscript
        Steps:
        1. Create new submission with auto option on (any but 'after full submission', as we cannot
             disable automation in this case)
        2. As an editorial user, disable automation generating report manually
        3. Register Minor or Major decision
        4. As an author, submit new version
        5. As an editorial user, open Similarity Check Card to check that auto option stays disabled
             for that manuscript
        :return: void function
        """

        logging.info('Test Similarity Check with Automation On:: disable automation by '
                     'sending report manually')

        # excluding 'off' and 'after full submission' options
        auto_setting = random.choice(auto_options[1:4])
        logging.info('Testing with auto option, mmt name: {0}'.format(str(auto_setting)))
        auto_option = auto_setting[0]
        mmt_name = auto_setting[1]

        # log as an author and create new submission
        creator_user = random.choice(users)
        logging.info('Logging in as user: {0}'.format(creator_user['name']))
        doc_to_use = random.choice(doc_choice)
        logging.info('Chosen file to upload: {0}'.format(doc_to_use))
        title = 'Similarity Check test manual send report - disable auto trigger: ' \
                '{0}'.format(auto_option)
        short_doi, paper_url = self.create_new_submission_complete_tasks_and_submit(
                creator_user, title, doc_to_use, mmt_name)

        # log as editorial user
        staff_user = random.choice(editorial_users)
        workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)

        workflow_page.click_card('similarity_check')
        sim_check = SimilarityCheckCard(self.getDriver())
        sim_check.card_ready()

        auto_settings_db = sim_check.get_sim_check_auto_settings(short_doi=short_doi)
        assert auto_settings_db == auto_option, 'Automation setting in db: \'{0}\' is not ' \
            'the expected: \'{1}\''.format(auto_settings_db, auto_option)

        sim_check.validate_card_header(short_doi)
        sim_check.validate_styles_and_components(auto_option)

        # generating report manually
        start_time, pending_message, report_title = sim_check.generate_manual_report()
        assert "Pending" in pending_message, '\'Pending\' is expected in the message: {0}'\
            .format(pending_message)
        assert 'Similarity Check Report' in report_title, '\'Similarity Check Report\' is ' \
                                                          'expected in: '.format(report_title)

        self.validate_report_history(sim_check, version='0.0')
        sim_check.click_close_button()
        self.wait_for_card_to_be_closed(workflow_page)

        decision = random.choice(['Major Revision', 'Minor Revision'])
        logging.info('Chosen Decision to register: {0}'.format(decision))
        # register decision
        self.make_register_decision(workflow_page, decision)
        workflow_page.logout()

        # Login as user and complete Revise Manuscript (Response to Reviewers)
        self.submit_new_version(short_doi, creator_user)

        # log as editorial user
        workflow_page = self.go_to_ms_wokflow_as_editor(staff_user, paper_url)
        workflow_page.click_card('similarity_check')
        # checking styles and components - automation should stay disabled
        sim_check.validate_styles_and_components('off')
        # check Report History
        self.validate_report_history(sim_check, version='0.0')

    def validate_report_history(self, sim_check, version):
        """
        Validates Report History after Report generation
        :param sim_check: SimilarityCheckCard instance
        :param version: String, to validate version number in Report History
        :return: void function
        """
        # check Report History
        report_history_title, versions, last_version_report = sim_check.get_report_history()
        assert 'Report History' in report_history_title, '\'Report \' is expected in {0}'\
            .format(report_history_title)
        assert len(versions) == 1, '{0} versions in the Report History. Only one version ' \
                                   'of Report is expected.'.format(str(len(versions)))
        card_completed = sim_check.completed_state()
        if card_completed:
            assert 'Pending' not in last_version_report
        if version:
            assert version in versions[0]

    def make_register_decision(self, workflow_page, decision):
        """
        Method to create Register Decision by clicking and completion Register Decision Card
        using specified decision
        :param workflow_page: WorkflowPage instance
        :param decision: String, possible values: 'Major Revision', 'Minor Revision'
        :return: void function
        """
        workflow_page.click_card('register_decision')
        register_decision = RegisterDecisionCard(self.getDriver())
        register_decision.register_decision(decision)

    def go_to_ms_wokflow_as_editor(self, staff_user, paper_url):
        """
        Method to log in as an staff user and navigate  directly to manuscript workflow view
        :param staff_user: staff user account
        :param paper_url: string, used to navigate  directly to manuscript workflow view
        :return: workflow_page: WorkflowPage instance
        """
        # log as editorial user
        # staff_user = random.choice(editorial_users)
        logging.info('Logging in as editorial user: {0}'.format(staff_user['name']))
        dashboard_page = self.cas_login(email=staff_user['email'])
        dashboard_page._wait_on_lambda(
                lambda: paper_url.split('/')[2] in dashboard_page.get_current_url())
        # dashboard_page.page_ready()
        # navigate directly to manuscript workflow view
        paper_workflow_url = '{0}/workflow'.format(paper_url)
        self._driver.get(paper_workflow_url)
        workflow_page = WorkflowPage(self.getDriver())
        workflow_page.page_ready()
        return workflow_page

    def create_new_submission_complete_tasks_and_submit(self, creator_user, title,
                                                        document, mmt_name):
        """
        Method to log in as a creator user and create new submission
        :param creator_user: specific creator user account
        :param title: string, title of created manuscript
        :param document: Name of the document to upload. If blank will default to 'random',
        this will choose one of available papers
        :param mmt_name: type of the manuscript
        :return: short_doi, paper_url
        """
        dashboard_page = self.cas_login(email=creator_user['email'])
        dashboard_page.click_create_new_submission_button()

        self.create_article(title=title, journal='PLOS Wombat', type_=mmt_name,
                            document=document,
                            random_bit=True, format_='word')

        manuscript_page = ManuscriptViewerPage(self.getDriver())
        manuscript_page.page_ready()
        short_doi = manuscript_page.get_paper_short_doi_from_url()
        paper_url = manuscript_page.get_current_url_without_args()
        logging.info("Assigned paper short doi: {0}".format(short_doi))
        # Complete cards
        doc_format = document.split('.')[-1] if document else 'word'
        if doc_format == 'pdf':
            manuscript_page.click_task('Upload Manuscript')
            upms = UploadManuscriptTask(self.getDriver())
            upms.task_ready()
            upms.upload_source_file()
            upms._wait_for_element(upms._get(upms._completion_button))
            manuscript_page.complete_task('Upload Manuscript', click_override=True)
        else:
            manuscript_page.complete_task('Upload Manuscript')
        manuscript_page.complete_task('Title And Abstract')
        manuscript_page.click_submit_btn()
        manuscript_page.confirm_submit_btn()
        manuscript_page.close_submit_overlay()
        # logout
        manuscript_page.logout()
        return short_doi, paper_url


if __name__ == '__main__':
    CommonTest.run_tests_randomly()
