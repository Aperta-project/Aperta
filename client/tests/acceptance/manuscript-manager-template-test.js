// Generated by CoffeeScript 1.10.0
import Ember from 'ember';
import { test } from 'ember-qunit';
import FactoryGuy from 'ember-data-factory-guy';
import * as TestHelper from 'ember-data-factory-guy';
import moduleForAcceptance from 'tahi/tests/helpers/module-for-acceptance';
import customAssertions from 'tahi/tests/helpers/custom-assertions';
let adminJournal, mmt;
moduleForAcceptance('Integration: Manuscript Manager Templates', {
  beforeEach: function() {
    customAssertions();
    adminJournal = FactoryGuy.make('admin-journal', {
      id: 1
    });
    mmt = FactoryGuy.make('manuscript-manager-template', {
      id: 1,
      journal: adminJournal
    });
    TestHelper.mockFindRecord('admin-journal').returns({
      model: adminJournal
    });
    return Ember.run(() => {
      $.mockjax({
        url: '/api/admin/journals/authorization',
        status: 204
      });

      $.mockjax({
        type: 'GET',
        url: '/api/journals',
        status: 200,
        responseText: {
          journals: []
        }
      });
    });
  },

  afterEach() {
    $.mockjax.clear();
  }
});

function createPhaseTemplate() {
  return FactoryGuy.make('phase-template', {
    id: 1,
    manuscriptManagerTemplate: mmt,
    name: 'Phase 1'
  });
}

test('Changing phase name', function(assert) {
  var columnTitleSelect = 'h2.column-title:contains("Phase 1")';
  createPhaseTemplate();

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');

  click(columnTitleSelect).then(function() {
    return Ember.$(columnTitleSelect).html('Shazam!');
  });
  andThen(function() {
    assert.textPresent('h2.column-title', 'Shazam!');
  });
});

test('Deleting a phase with no cards', function(assert) {
  let phase_template = createPhaseTemplate();
  $.mockjax({
    url: `/api/phase_templates/${phase_template.get('id')}`,
    type: 'DELETE',
    status: 204,
    responseText: ''});

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  andThen(function() {
    assert.textPresent('.column-title', 'Phase 1');
  });
  click('.remove-icon');
  andThen(function() {
    assert.mockjaxRequestMade(`/api/phase_templates/${phase_template.get('id')}`, 'DELETE', 'it deletes the phase');
    assert.textNotPresent('.column-title', 'Phase 1');
  });
});

test('Deleting a newly created phase not yet saved in the database', function(assert) {
  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  click('.add-column');
  andThen(function() {
    assert.textPresent('.column-title', 'New Phase');
  });
  click('.remove-icon');
  andThen(function() {
    assert.textNotPresent('.column-title', 'New Phase');
  });
});

test('Adding an Ad-Hoc card', function(assert) {
  var journalTaskType = FactoryGuy.make('journal-task-type', {
    id: 1,
    kind: "AdHocTask",
    title: "Ad Hoc"
  });
  Ember.run(function() {
    adminJournal.set('journalTaskTypes', [journalTaskType]);
  });
  createPhaseTemplate();

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  click('.button--green:contains("Add New Card")');
  click('label:contains("Ad Hoc")');
  click('.overlay .button--green:contains("Add")');
  andThen(function() {
    assert.elementFound('h1.inline-edit:contains("Ad Hoc")');
    assert.notOk(find('h1.inline-edit').hasClass('editing'), 'The title should not be editable to start');
  });

  click('.adhoc-content-toolbar .fa-plus');
  click('.adhoc-content-toolbar .adhoc-toolbar-item--label');
  fillInContentEditable('.inline-edit-form div[contenteditable]', 'New contenteditable, yahoo!');
  click('.task-body .inline-edit-body-part .button--green:contains("Save")');
  andThen(function() {
    return assert.textPresent('.inline-edit', 'yahoo', 'text is still correct');
  });
  click('.inline-edit-body-part .fa-trash');
  andThen(function() {
    return assert.textPresent('.inline-edit-body-part', 'Are you sure?');
  });
  click('.inline-edit-body-part .delete-button');
  andThen(function() {
    return assert.textNotPresent('.inline-edit', 'yahoo', 'Deleted text is gone');
  });
  click('.overlay-close-button');
  click('.card-title');
  return andThen(function() {
    return assert.elementFound('h1.inline-edit:contains("Ad Hoc")', 'User can edit the existing ad-hoc card');
  });
});

test('User cannot edit a non Ad-Hoc card', function(assert) {
  var journalTaskType = FactoryGuy.make('journal-task-type', {
    id: 1,
    kind: "BillingTask",
    title: "Billing"
  });
  Ember.run(function() {
    adminJournal.set('journalTaskTypes', [journalTaskType]);
  });
  createPhaseTemplate();

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  click('.button--green:contains("Add New Card")');
  click('label:contains("Billing")');
  click('.overlay .button--green:contains("Add")');
  click('.card-title');
  return andThen(function() {
    return assert.elementNotFound('.ad-hoc-template-overlay', 'Clicking any other card has no effect');
  });
});

test('User can enable a workflow as preprint eligible', function(assert){
  var journalTaskType = FactoryGuy.make('journal-task-type', {
    id: 1,
    kind: 'AdHocTask',
    title: 'Ad Hoc'
  });

  FactoryGuy.make('feature-flag', {id: 1, name: 'PREPRINT', active: true});
  Ember.run(function() {
    adminJournal.set('journalTaskTypes', [journalTaskType]);
  });
  createPhaseTemplate();

  $.mockjax({
    url: '/api/manuscript_manager_templates/1',
    status: 204
  });

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  andThen(() => {
    assert.elementFound('.preprint-eligible');
  });

  click('.preprint-eligible input');
  andThen(() => {
    assert.mockjaxRequestMade('/api/manuscript_manager_templates/1', 'PUT', 'request made after click');
  });
});

test('Preprint eligible is hidden if feature flag is not set', function(assert){
  var journalTaskType = FactoryGuy.make('journal-task-type', {
    id: 1,
    kind: 'AdHocTask',
    title: 'Ad Hoc'
  });
  Ember.run(function() {
    adminJournal.set('journalTaskTypes', [journalTaskType]);
  });
  createPhaseTemplate();

  $.mockjax({
    url: '/api/manuscript_manager_templates/1',
    status: 204
  });

  visit('/admin/mmt/journals/1/manuscript_manager_templates/1/edit');
  andThen(() => {
    assert.elementNotFound('.preprint-eligible');
  });
});
