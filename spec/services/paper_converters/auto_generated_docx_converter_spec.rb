require 'rails_helper'

# rubocop:disable Metrics/BlockLength
describe PaperConverters::AutoGeneratedDocxToPdfConverter do
  let(:export_format) { 'pdf' }
  let(:journal) do
    FactoryGirl.create(
      :journal,
      :with_creator_role,
      pdf_css: 'body { background-color: red; }'
    )
  end
  let(:user) { FactoryGirl.create :user }
  let(:paper) { create(:paper, :version_with_file_type, :with_creator, journal: journal) }
  let(:versioned_text) { paper.latest_version }
  let(:task) { FactoryGirl.create(:supporting_information_task) }
  let(:converter) { PaperConverters::AutoGeneratedDocxToPdfConverter.new(versioned_text, export_format, user) }

  it_behaves_like "a synchronous paper converter"

  describe "#output_filename" do
    subject { converter.output_filename }
    it { is_expected.to eq "aperta-generated-PDF.pdf" }
  end

  describe "#output_filetype" do
    subject { converter.output_filetype }
    it { is_expected.to eq('application/pdf') }
  end

  describe '#output_data' do
    it 'uses PDFKit to generate PDF' do
      expect(PDFKit).to receive_message_chain(:new, :to_pdf)
      converter.output_data
    end
  end

  # rubocop:disable Metrics/BlockLength
  describe '.pdf_html' do
    let(:doc) { Nokogiri::HTML(pdf_html) }
    let(:pdf_html) { converter.pdf_html }

    after { expect(doc.errors.length).to be 0 }

    it 'includes all necessary info and default journal stylesheet
      in the generated HTML' do
      expect(pdf_html).to include journal.pdf_css
      expect(pdf_html).to include paper.display_title(sanitized: false)
      expect(pdf_html).to include paper.body
    end

    it "displays HTML in the paper's title" do
      paper.title = 'This <i>is</i> the Title'
      pdf_doc_title = doc.css('#paper-body h1').inner_html.to_s
      expect(pdf_doc_title).to eq(paper.display_title(sanitized: false))
    end

    context 'when paper has no supporting information files' do
      it 'doesnt have supporting information' do
        expect(paper.supporting_information_files.empty?).to be true
        expect(pdf_html).not_to include 'Supporting Information'
      end
    end

    context 'when paper has supporting information files' do
      let(:file) do
        paper.supporting_information_files.create!(
          resource_tokens: [ResourceToken.new(version_urls: { preview: Faker::Internet.url })],
          owner: task,
          file: ::File.open('spec/fixtures/yeti.tiff')
        )
      end

      it 'has supporting information file added' do
        pending "waiting for APERTA-9406"
        expect(file).to be_truthy
        expect(paper.supporting_information_files.length).to be 1
        expect(doc.css('#si_header').count).to be 0
        pending "waiting for APERTA-9406" do
          expect(doc.css("img#si_preview_#{file.id}").count).to be 1
        end
        expect(doc.css("a#si_link_#{file.id}").count).to be 1
      end
    end
  end
end
