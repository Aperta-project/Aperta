# Copyright (c) 2018 Public Library of Science

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

require 'rails_helper'

describe PaperConverters::AutoGeneratedPdfToPdfConverter do
  let(:export_format) { 'pdf' }
  let(:paper) { create(:paper, :version_with_file_type, :with_creator) }
  let(:figure_count) { 2 }
  let!(:figures) { create_list(:figure, figure_count, owner: paper).tap { paper.reload } }
  let(:versioned_text) { paper.latest_version }
  let(:converter) { PaperConverters::AutoGeneratedPdfToPdfConverter.new(versioned_text, export_format) }
  let(:pdf_data) { File.read(Rails.root.join('spec/fixtures/about_turtles.pdf')) }

  it_behaves_like "a synchronous paper converter"

  describe "#output_filename" do
    subject { converter.output_filename }
    it { is_expected.to eq "aperta-generated-PDF.pdf" }
  end

  describe "#supporting_information_files" do
    subject { converter.supporting_information_files }

    it { is_expected.to eq [] }
  end

  describe "#output_data" do
    subject { converter.output_data }
    let(:sample_combine_pdf) { CombinePDF.parse pdf_data }

    before do
      allow(converter).to receive(:parsed_uploaded_pdf).and_return(sample_combine_pdf)
      allow(converter).to receive(:create_attachments_pdf).and_return(sample_combine_pdf)
    end

    it "is serialized to String" do
      expect(subject).to be_an_instance_of String
    end
  end
end
