# card.rnc: If this file is card.rnc: Do not forget to update card.rng if you
# change this file! This is not actually used by Aperta, but it is far easier to
# write than XML. .rnc is the RelaxNG compact schema format. We translate it
# into the xml format using a utility called `trang`. `trang `is a java utility
# from RelaxNG. if you're using apt you can install it via `sudo apt-get install
# trang`, otherwise clone the repo at https://github.com/relaxng/jing-trang and
# follow the instructions there. Run trang (or the trang.jar file)as follows to
# translate the compact rnc format to the rng that gets used in the XmlCardLoader
#   `trang -I rnc -O rng card.rnc card.rng`
#
# card.rng: If this file is card.rng, please edit card.rnc instead. You will be happier.

file-type = xsd:string { pattern = "\.\w*" }

possible-value = element possible-value {
                     attribute label { text },
                     attribute value { text }
                 }

accepted-file-type = element possible-value {
                         attribute label { text },
                         attribute value { file-type }
                     }

instructions-label-required-text =
    element instruction-text { html }?
  & element label { html }?
  & element text { html }

instructions-label-optional-text =
    element instruction-text { html }?
  & element label { html }?
  & element text { html }?

file-validation =
  element validation {
    attribute validation-type { "file-name" }
    & element error-message { text }
    & element validator { text }
  }

string-validation =
  element validation {
    attribute validation-type { "string-match" | "string-length-minimum" | "string-length-maximum" }
    & element error-message { text }
    & element validator { text }
  }

allow-annotations      = attribute allow-annotations      { "true" | "false" }
required-field         = attribute required-field         { "true" | "false" }
default-answer-boolean = attribute default-answer-value   { "true" | "false" }
default-answer-text    = attribute default-answer-value   { text }

# Inputs
radio-input = element content {
  attribute content-type { "radio" }
  & attribute ident { text }?
  & attribute value-type { "text" | "boolean" }
  & default-answer-text?
  & allow-annotations?
  & required-field?
  & instructions-label-optional-text
  & possible-value*
  & content*
}

check-box-input = element content {
  attribute content-type { "check-box" }
  & attribute ident { text }?
  & attribute value-type { "boolean" }
  & default-answer-boolean?
  & allow-annotations?
  & required-field?
  & instructions-label-optional-text
  & content*
}

file-uploader = element content {
  attribute content-type { "file-uploader" }
  & attribute ident { text }?
  & attribute value-type { "attachment" | "manuscript" | "sourcefile" }
  & attribute error-message { text }?
  & attribute allow-file-captions    { "true" | "false" }?
  & attribute allow-multiple-uploads { "true" | "false" }?
  & allow-annotations?
  & required-field?
  & instructions-label-optional-text
  & file-validation*
  & accepted-file-type*
}

date-picker = element content {
  attribute content-type { "date-picker" }
  & attribute ident { text }?
  & attribute value-type { "text" }
  & required-field?
  & instructions-label-required-text
}

dropdown-input = element content {
  attribute content-type { "dropdown" }
  & attribute ident { text }?
  & attribute value-type { "text" | "boolean" }
  & default-answer-text?
  & allow-annotations?
  & required-field?
  & instructions-label-required-text
  & possible-value+
  & content*
}

tech-check = element content {
  attribute content-type { "tech-check" }
  & attribute ident { text }?
  & attribute value-type { "boolean" }
  & default-answer-boolean?
  & allow-annotations?
  & required-field?
  & instructions-label-required-text
  & content*
}

sendback-reason = element content {
  attribute content-type { "sendback-reason" }
  & attribute ident { text }?
  & attribute value-type { "boolean" }
  & instructions-label-optional-text
  & content*
}

text-input = element content {
  attribute content-type { "short-input" | "paragraph-input" }
  & attribute ident { text }?
  & attribute value-type { "text" | "html" }
  & attribute editor-style { text }?
  & default-answer-text?
  & allow-annotations?
  & required-field?
  & instructions-label-optional-text
  & string-validation*
}

# Contents
description = element content {
  attribute content-type { "description" }
  & attribute ident { text }?
  & element text { html }
  & content*
}

display-children-content = element content {
  attribute content-type { "display-children" }
  & attribute ident { text }?
  & attribute child-tag { 'li' }?
  & attribute custom-class { text }?
  & attribute custom-child-class { text }?
  & attribute wrapper-tag { text }?
  & content*
}

display-with-value-content = element content {
  attribute content-type { "display-with-value" }
  & attribute ident { text }?
  & attribute visible-with-parent-answer { text }
  & content*
  }

export-paper = element content {
  attribute content-type { "export-paper" }
  & attribute ident { text }?
  & instructions-label-optional-text
}

if = element content {
  (attribute content-type { "if" }
   & attribute condition { text }
   & content
  ),
  content?
}

error-message = element content {
  attribute content-type { "error-message" }
  & attribute key { text }
  & element text { text }?
}

html = any-element* & text
any-element = element * { any-attribute*, html }
any-attribute = attribute * { text }

content = (
  check-box-input
| date-picker
| description
| display-children-content
| display-with-value-content
| dropdown-input
| error-message
| export-paper
| file-uploader
| if
| radio-input
| sendback-reason
| tech-check
| text-input
)

start = element card {
  attribute required-for-submission { "true" | "false" }
  & attribute workflow-display-only { "true" | "false" }
  & content
}
