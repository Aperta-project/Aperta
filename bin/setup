#!/usr/bin/env ruby

require 'bundler/inline'
gemfile(true) { gem 'rails_setup', path: 'neo/rails_setup' }
include RailsSetup

ensure_osx_or_debian_or_ubuntu

SLANGER_REPO = "git@github.com:Tahi-project/tahi-slanger.git"

def setup_slanger
  header 'Cloning tahi-slanger event server repo'

  if Dir.exist? '../tahi-slanger'
    puts "Slanger repo already cloned."
  elsif !system "cd .. && git clone #{SLANGER_REPO}"
    puts "Couldn't clone repo."
    exit 1
  end

  header 'Installing tahi-slanger dependencies.'

  if !Bundler.with_clean_env { system "cd ../tahi-slanger && bundle install" }
    puts 'Failed.'
    exit 1
  else
    puts 'Done.'
  end
end

Dir.chdir app_root do
  system "rm -f setup.log"

  header 'Checking database setup'
  ensure_postgres_setup

  header 'Installing other package dependencies'
  case os
  when :darwin
    brew_install 'imagemagick', '--with-libtiff'
    %w(node watchman qt).each do |package|
      brew_install package
    end
  when :linux
    system "sudo apt-get install -y imagemagick nodejs qt5-default libqt5webkit5-dev"
  end

  header 'Installing gems'
  Bundler.with_clean_env do
    system 'gem install bundler --conservative'
    system 'bundle install'
  end

  header 'Installing javascript dependencies (output logged to setup.log)'
  system 'npm install >> setup.log'
  system 'bundle exec rake ember-cli:install_dependencies'

  header 'Ensuring PostgreSQL tahi role exists'
  ensure_postgres_role 'tahi'

  header 'Copying sample files'
  copy_template 'config/database.yml.sample', 'config/database.yml'
  copy_template 'Procfile.template', 'Procfile.local'

  setup_slanger

  header 'Creating .env.development with secret token base.'
  create_config_file '.env.development' do |f|
    f.puts "RAILS_SECRET_TOKEN=#{`bin/rake secret`}"
  end

  create_config_file '.foreman' do |f|
    f.puts "port: 5000"
    f.puts "procfile: Procfile.local"
    f.puts "env: .env,.env.development"
  end

  header 'Preparing development database (output logged to setup.log)'
  system 'bin/rake db:setup >> setup.log'

  header 'Preparing testing database (output logged to setup.log)'
  system 'bin/rake db:setup RAILS_ENV=test >> setup.log'

  header 'Removing old logs and tempfiles'
  system 'rm -f log/**/*'
  system 'rm -rf tmp/cache'

  puts
  puts 'Success!'
end
