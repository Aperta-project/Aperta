import Ember from 'ember';

/* Template:
 * {{#auto-suggest endpoint="/api/filtered_users"
 *                 inputId="HTML input element id goes here"
 *                 inputName="HTML input element names goes here"
 *                 queryParameter="email"
 *                 resultText=someBoundValue
 *                 placeholder="Search for user by email address"
 *                 parseResponseFunction=parseUserSearchResponse
 *                 itemDisplayTextFunction=something
 *                 itemSelected="userSelected"
 *                 inputChanged="inputChanged"
 *                 as |user|}}
 *   {{user.fullName}} - {{user.email}}
 * {{/auto-suggest}}
 *
 * Controller: {
 *   parseUserSearchResponse(response) {
 *     return response.users;
 *   },
 *
 *   something(user) {
 *     return user.email;
 *   }
 * }
*/

export default Ember.Component.extend({
  restless: Ember.inject.service('restless'),
  classNames: ['form-control', 'auto-suggest-border'],
  classNameBindings: ['errorMessage:error'],

  // -- attrs:

  /**
   *  Endpoint for HTTP request
   *
   *  @property endpoint
   *  @type String
   *  @default null
   *  @required
   **/
  endpoint: null,

  /**
   *  Query tacked on end of endpoint
   *  /api/filtered_users?email=
   *
   *  @property queryParameter
   *  @type String
   *  @default null
   *  @required
   **/
  queryParameter: null,

  /**
   *  Function called to manipulate data before displaying in component
   *  function(response) { return response.users.sort.map.filter.etc.etc.etc; }
   *
   *  @property queryParameter
   *  @type String
   *  @default null
   *  @required
   *  @param {Object} http request response
   **/
  parseResponseFunction: null,

  /**
   *  When an item is chosen from the list, this function can be used
   *  to display text in the input.
   *
   *  @property itemDisplayTextFunction
   *  @type Function
   *  @default null
   *  @param {Object|Array} A single item from your datasource
   *  @return String
   **/
  itemDisplayTextFunction: null,

  /**
   *  Placeholder text for input
   *
   *  @property placeholder
   *  @type String
   *  @default null
   **/
  placeholder: null,

  /**
   *  The id for the input element generated by this component.
   *
   *  @property inputId
   *  @type String
   *  @default null
   **/
  inputId: null,

  /**
   *  The name for the input element generated by this component.
   *
   *  @property inputName
   *  @type String
   *  @default null
   **/
  inputName: null,

  /**
   * The CSS selector for placing the auto-suggest-list when showing
   * results. Defaults to a selector that finds ember generated deactivate
   * that contains the input text field.
   *
   *  @property positionNearSelector
   *  @type String
   *  @default "#{{elementId}}"
   *  @private
   **/
  positionNearSelector: function(){
    return '#' + this.get('elementId');
  }.property('elementId'),

  /**
   *  The string that's shown in the autosuggest input
   *
   *  @property resultText
   *  @type String
   *  @default null
   **/
  resultText: null,

  // -- props:
  debounce: 300,
  highlightedItem: null,
  searchAllowed: true,
  searchResults: null,
  selectedItem: null,
  searching: 0,

  search() {
    if (!this.get('resultText')) { return; }

    this.incrementProperty('searching');
    let url = this.get('endpoint');
    let data = {};
    data[this.get('queryParameter')] = this.get('resultText');

    this.get('restless').get(url, data).then((response) => {
      let results = this.get('parseResponseFunction')(response);
      if (!this.get('resultText')) { return; }
      this.set('searchResults',  results);
    }).finally(() => {
      this.decrementProperty('searching');
    });
  },

  _resultTextChanged: Ember.observer('resultText', function() {
    if (!this.get('resultText')) {
      this.set('searchResults', null);
    }

    if(this.get('searchAllowed')) {
      Ember.run.debounce(this, this.search, this.get('debounce'));
    }

    this.set('searchAllowed', true);
  }),

  selectItem(item) {
    this.set('searchAllowed', false);
    this.set('selectedItem', item);
    this.sendAction('itemSelected', item);

    if(this.itemDisplayTextFunction) {
      let textForInput = this.itemDisplayTextFunction(item);
      this.sendAction('inputChanged', textForInput);
    }

    this.set('searchResults', null);
  },

  actions: {
    selectItem(item) {
      this.selectItem(item);
    },

    valueChanged(e) {
      this.sendAction('inputChanged', e.target.value);
    },

    keyUp(inputValue, event) {
      if (event.which === 27) { // esc
        this.set('highlightedItem', null);
      }

      // return or esc
      if(event.which === 13 || event.which === 27) {
        let highlightedItem = this.get('highlightedItem');

        if(highlightedItem) {
          this.selectItem(highlightedItem);
        }

        this.set('highlightedItem', null);
        this.set('searchResults', null);
      } else {
        this.sendAction('inputChanged', inputValue);
      }
    }
  }
});
