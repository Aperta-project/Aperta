window.deprecationWorkflow = window.deprecationWorkflow || {};
window.deprecationWorkflow.config = {
  workflow: [
    { handler: "silence", matchMessage: "Ember.create is deprecated in favor of Object.create" },
    { handler: "silence", matchMessage: "Using `Ember.HTMLBars.makeBoundHelper` is deprecated. Please refactor to using `Ember.Helper` or `Ember.Helper.helper`." },
    { handler: "silence", matchMessage: "Using Ember.HTMLBars._registerHelper is deprecated. Helpers (even dashless ones) are automatically resolved." },
    { handler: "silence", matchMessage: "Passing the dependentKeys after the callback function in Ember.observer is deprecated. Ensure the callback function is the last argument." },
    { handler: "silence", matchMessage: "Ember.reduceComputed is deprecated. Replace it with plain array methods" },
    { handler: "silence", matchMessage: "the component:comment-board test module is implicitly running in unit test mode, which will change to integration test mode by default in an upcoming version of ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit test mode." },
    { handler: "silence", matchMessage: "the component:question test module is implicitly running in unit test mode, which will change to integration test mode by default in an upcoming version of ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit test mode." },
    { handler: "silence", matchMessage: "the component:select-2 test module is implicitly running in unit test mode, which will change to integration test mode by default in an upcoming version of ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit test mode." },
    { handler: "silence", matchMessage: "`lookupFactory` was called on a Registry. The `initializer` API no longer receives a container, and you should use an `instanceInitializer` to look up objects from the container." },
    { handler: "silence", matchMessage: "`lookup` was called on a Registry. The `initializer` API no longer receives a container, and you should use an `instanceInitializer` to look up objects from the container." },
    { handler: "silence", matchMessage: "Ember.keys is deprecated in favor of Object.keys" },
    { handler: "silence", matchMessage: "Usage of `typeKey` has been deprecated and will be removed in Ember Data 1.0. It has been replaced by `modelName` on the model class." },
    { handler: "silence", matchMessage: "Controller#needs is deprecated, please use Ember.inject.controller() instead" },
    { handler: "silence", matchMessage: "Ember.View is deprecated. Consult the Deprecations Guide for a migration strategy." },
    { handler: "silence", matchMessage: "Ember.Enumerable.mapProperty is deprecated. Use mapBy instead." },
    { handler: "silence", matchMessage: "Ember.Enumerable.everyProperty is deprecated. Use isEvery instead." },
    { handler: "silence", matchMessage: "Usage of Ember.computed.any is deprecated, use `Ember.computed.or` instead." },
    { handler: "silence", matchMessage: "Ember.Enumerable.findProperty is deprecated. Use findBy instead." },
    { handler: "silence", matchMessage: "TAHI DEPRECATION: RadioButtonAction is deprecated in favor of RadioButton." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-radio::ember2272> is deprecated. To determine if a block was specified to <tahi@component:question-radio::ember2272> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-radio::ember2822> is deprecated. To determine if a block was specified to <tahi@component:question-radio::ember2822> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-check::ember3597> is deprecated. To determine if a block was specified to <tahi@component:question-check::ember3597> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-check::ember3641> is deprecated. To determine if a block was specified to <tahi@component:question-check::ember3641> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember3988> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-check::ember4388> is deprecated. To determine if a block was specified to <tahi@component:question-check::ember4388> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember4857> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember4894> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember4936> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember4969> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@component:-test-holder::ember5011> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "`Ember.ArrayController` is deprecated." },
    { handler: "silence", matchMessage: "Accessing 'template' in <tahi@component:question-check::ember18205> is deprecated. To determine if a block was specified to <tahi@component:question-check::ember18205> please use '{{#if hasBlock}}' in the components layout." },
    { handler: "silence", matchMessage: "A property of <tahi@view:-outlet::ember18457> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@view:-outlet::ember18946> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: "A property of <tahi@view:-outlet::ember19305> was modified inside the didInsertElement hook. You should never change properties on components, services or models during didInsertElement because it causes significant performance degradation." },
    { handler: "silence", matchMessage: ".createWithMixins is deprecated, please use .create or .extend accordingly" },
    { handler: "silence", matchMessage: "register should be called on the registry instead of the container" }
  ]
};
