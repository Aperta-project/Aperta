// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery-ujs
//= require jquery-fileupload/basicplus
//= require underscore
//= require ScrollToFixed
//= require jQuery.dotdotdot/src/js/jquery.dotdotdot
//= require jquery-timeago/jquery.timeago
//= require typeahead.js/dist/typeahead.bundle
//= require spin.js/spin
//
//= require select2/select2
//= require bootstrap-sass/dist/js/bootstrap
//= require bootstrap-datepicker/js/bootstrap-datepicker
//= require chosen.jquery
//= require event-source-polyfill/eventsource
//
//= require handlebars
//= require ember
//= require ember-data
//= require utils
//= require_self
//= require e_tahi
//= require_tree .
//= require standard_tasks/application
//= require plos_authors/application
//= require supporting_information/application
//= require upload_manuscript/application
// = require moment
// DO NOT DELETE OR EDIT. AUTOMATICALLY MOUNTED CUSTOM TASK CARDS GO HERE //

(function(context) {
  context.ETahi = Ember.Application.create({
    rootElement: '#ember-app',

    // Ember
    LOG_STACKTRACE_ON_DEPRECATION  : true,
    LOG_BINDINGS                   : true,
    LOG_TRANSITIONS                : false,
    LOG_TRANSITIONS_INTERNAL       : false,
    LOG_VIEW_LOOKUPS               : false,
    LOG_ACTIVE_GENERATION          : false,
    // Tahi
    LOG_RSVP_ERRORS                : true,
    LOG_VIEW_RENDERING_PERFORMANCE : true
  });

  ETahi.computed = {};
  ETahi.computed.all = function(hasMany, key, value){
    return Em.computed(hasMany+'.@each.'+key, function(){
      return this.get(hasMany).everyProperty(key, value);
    });
  };

  arrayComputed = Ember.arrayComputed;
  ETahi.computed.limit = function (dependentKey, length) {
    var options = {
      initialize: function (array, changeMeta, instanceMeta) {
        instanceMeta.filteredArrayIndexes = new Ember.SubArray();
      },

      addedItem: function(array, item, changeMeta, instanceMeta) {
        var filterIndex = instanceMeta.filteredArrayIndexes.addItem(changeMeta.index, true);
        if (array.length < length) {
          array.insertAt(filterIndex, item);
        } else {
          if (changeMeta.changedCount == 1 && changeMeta.index < length) {
            array.popObject();
            array.insertAt(filterIndex, item);
          }
        }

        return array;
      },

      removedItem: function(array, item, changeMeta, instanceMeta) {
        var filterIndex = instanceMeta.filteredArrayIndexes.removeItem(changeMeta.index);

        if (array.length && filterIndex > -1 && filterIndex < length) {
          array.removeAt(filterIndex);
        }

        return array;
      }
    };

    return arrayComputed(dependentKey, options);
  }

  ETahi.environment = "<%= Rails.env %>";
  <% if Tahi::Application.config.try(:ihat_supported_formats) %>
    ETahi.supportedDownloadFormats = JSON.parse('<%= Tahi::Application.config.ihat_supported_formats %>');
  <% end %>
})(window);

$.extend($.easing, {
  easeInCubic: function (x, t, b, c, d) {
    return c*(t/=d)*t*t + b;
  }
});
