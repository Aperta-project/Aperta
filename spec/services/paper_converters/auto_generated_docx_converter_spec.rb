# Copyright (c) 2018 Public Library of Science

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

require 'rails_helper'

# rubocop:disable Metrics/BlockLength
describe PaperConverters::AutoGeneratedDocxToPdfConverter do
  let(:export_format) { 'pdf' }
  let(:journal) do
    FactoryGirl.create(
      :journal,
      :with_creator_role,
      pdf_css: 'body { background-color: red; }'
    )
  end
  let(:user) { FactoryGirl.create :user }
  let(:paper) { create(:paper, :version_with_file_type, :with_creator, journal: journal) }
  let(:versioned_text) { paper.latest_version }
  let(:task) { FactoryGirl.create(:supporting_information_task) }
  let(:converter) { PaperConverters::AutoGeneratedDocxToPdfConverter.new(versioned_text, export_format, user) }

  it_behaves_like "a synchronous paper converter"

  describe "#output_filename" do
    subject { converter.output_filename }
    it { is_expected.to eq "aperta-generated-PDF.pdf" }
  end

  describe "#output_filetype" do
    subject { converter.output_filetype }
    it { is_expected.to eq('application/pdf') }
  end

  describe '#output_data' do
    it 'uses PDFKit to generate PDF' do
      expect(PDFKit).to receive_message_chain(:new, :to_pdf)
      converter.output_data { is_expected.to be_present }
    end
  end

  describe "#supporting_information_files" do
    subject { converter.supporting_information_files }

    it { is_expected.to eq [] }
  end
end
