# card.rnc: If this file is card.rnc: Do not forget to update card.rng if you
# change this file! This is not actually used by Aperta, but it is far easier to
# write than XML. .rnc is the RelaxNG compact schema format. We translate it
# into the xml format using a utility called `trang`. `trang `is a java utility
# from RelaxNG. if you're using apt you can install it via `sudo apt-get install
# trang`, otherwise clone the repo at https://github.com/relaxng/jing-trang and
# follow the instructions there. Run trang (or the trang.jar file)as follows to
# translate the compact rnc format to the rng that gets used in the XmlCardLoader
#   `trang -I rnc -O rng card.rnc card.rng`
#
# card.rng: If this file is card.rng, please edit card.rnc instead. You will be happier.

file-type = xsd:string { pattern = "\.\w*" }

possible-value = element possible-value {
                     attribute label { text },
                     attribute value { text }
                 }

accepted-file-type = element possible-value {
                         attribute label { text },
                         attribute value { file-type }
                     }

# Inputs
radio-input = element content {
                  attribute ident { text }?,
                  attribute value-type { "text" | "boolean" },
                  attribute content-type { "radio" },
                  attribute required-field { "true" | "false" }?,
                  attribute default-answer-value { text }?,
                  attribute allow-annotations { "true" | "false" }?,
                  (element instruction-text { html }? &
                  element text { html }?),
                  possible-value*,
                  content*
              }


check-box-input = element content {
                attribute ident { text }?,
                attribute content-type { "check-box" },
                attribute required-field { "true" | "false" }?,
                attribute default-answer-value { "true" | "false" }?,
                attribute value-type { "boolean" },
                attribute allow-annotations { "true" | "false" }?,
                (element instruction-text { html }? &
                (element label { text }? &
                element text { html }?)),
                content*
            }

file-uploader = element content {
                    attribute ident { text }?,
                    attribute error-message { text }?,
                    attribute content-type { "file-uploader" },
                    attribute value-type { "attachment" | "manuscript" | "sourcefile" },
                    attribute required-field { "true" | "false" }?,
                    attribute allow-multiple-uploads { "true" | "false" }?,
                    attribute allow-file-captions { "true" | "false" }?,
                    attribute allow-annotations { "true" | "false" }?,
                    (element instruction-text { html }? &
                    (element validation {
                      attribute validation-type { "file-name" },
                      element error-message { text },
                      element validator { text }
                    }* &
                    element label { text }? &
                    element text { html }?)),
                    accepted-file-type*
                }

date-picker = element content {
                  attribute ident { text }?,
                  attribute value-type { "text" },
                  attribute content-type { "date-picker" },
                  attribute required-field { "true" | "false" }?,
                  element text { html }
              }

# for now duplicating radio-input for dropdown
dropdown-input = element content {
                  attribute ident { text }?,
                  attribute value-type { "text" | "boolean" },
                  attribute content-type { "dropdown" },
                  attribute required-field { "true" | "false" }?,
                  attribute default-answer-value { text }?,
                  attribute allow-annotations { "true" | "false" }?,
                  (element instruction-text { html }? &
                  element text { html }),
                  possible-value+,
                  content*
              }

tech-check = element content {
                attribute ident { text }?,
                attribute content-type { "tech-check" },
                attribute required-field { "true" | "false" }?,
                attribute default-answer-value { "true" | "false" }?,
                attribute value-type { "boolean" },
                attribute allow-annotations { "true" | "false" }?,
                (element instruction-text { html }? &
                element text { html })?,
                content*
            }

sendback-reason = element content {
                attribute ident { text }?,
                attribute content-type { "sendback-reason" },
                attribute value-type { "boolean" },
                (element label { text }? &
                element text { html }?),
                content*
            }


text-input = element content {
                 attribute ident { text }?,
                 attribute value-type { "text" | "html" },
                 attribute editor-style { text }?,
                 attribute content-type { "short-input" | "paragraph-input" },
                 attribute required-field { "true" | "false" }?,
                 attribute default-answer-value { text }?,
                 attribute allow-annotations { "true" | "false" }?,
                 (element instruction-text { html }? &
                 (element text { html }? &
                 element validation {
                  attribute validation-type { "string-match" | "string-length-minimum" | "string-length-maximum" },
                  element error-message { text },
                  element validator { text }
                }*))
             }

# Contents
description = element content {
                   attribute ident { text }?,
                   attribute content-type { "description" },
                   element text { html },
                   content*
               }

display-children-content = element content {
                               attribute ident { text }?,
                               attribute child-tag { 'li' }?,
                               attribute custom-class { text }?,
                               attribute custom-child-class { text }?,
                               attribute wrapper-tag { text }?,
                               attribute content-type { "display-children" },
                               content*
                           }

display-with-value-content = element content {
                                 attribute ident { text }?,
                                 attribute content-type { "display-with-value" },
                                 attribute visible-with-parent-answer { text },
                                 content*
                             }

export-paper = element content {
                attribute ident { text }?,
                attribute content-type { "export-paper" },
                (element label { text } &
                element text { html }?)
}

if = element content {
                attribute content-type { "if" },
                attribute condition { text },
                content,
                content?
}

error-message = element content {
                    attribute content-type { "error-message" },
                    attribute key { text },
                    element text { text }?
                }

html = any-element* & text
any-element = element * { any-attribute*, html }
any-attribute = attribute * { text }

content = (
           radio-input |
           text-input |
           description |
           display-children-content |
           display-with-value-content |
           export-paper |
           check-box-input |
           file-uploader |
           dropdown-input |
           date-picker |
           tech-check |
           sendback-reason |
           if |
           error-message
)

start = element card {
            attribute required-for-submission { "true" | "false" },
            attribute workflow-display-only { "true" | "false" },
            content
        }
